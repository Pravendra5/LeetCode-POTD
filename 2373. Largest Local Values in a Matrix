// JAVA CODE Time Complexity O(n^2)
class Solution {

    private int findLocalMax(int [][] grid, int x, int y){
        int maxElement = 0;
        for(int i = x; i < x + 3; i++){
            for(int j = y; j < y + 3; j++){
                maxElement = Math.max(maxElement, grid[i][j]);
            }
        }
        return maxElement;
    }
    public int[][] largestLocal(int[][] grid) {
        int n = grid.length;
        int [][] maxLocal = new int[n-2][n-2];
        for(int row = 0; row < n - 2; row++){
            for(int col = 0; col < n - 2; col++ ){
                maxLocal[row][col] = findLocalMax(grid, row, col);
            }
        }
    return maxLocal;
    }
}

// Python Code

class Solution:
    def largestLocal(self, grid: List[List[int]]) -> List[List[int]]:
        N = len(grid)
        res = [[0] * (N-2) for _ in range(N-2)]

        for i in range(N-2):
            for j in range(N-2):
                for r in range(i, i+3):
                    for c in range(j, j+3):
                        res[i][j] = max(res[i][j], grid[r][c])
                    
        return res
