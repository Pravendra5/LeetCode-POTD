// Approach -1  tc-O(nlogn) sc - O(1)

class Solution {
    public long maximumHappinessSum(int[] happiness, int k) {
        int n = happiness.length;
        long result = 0;
        int count = 0;
        Arrays.sort(happiness);

        for(int i=n-1; i>= n-k; i--){
            result += Math.max(happiness[i] - count, 0);
            count++;
        }
        return result;
    }
}

// Approach -2  tc-O(nlogn) sc - O(n)

class Solution {
    public long maximumHappinessSum(int[] happiness, int k) {
        int n = happiness.length;
        long result = 0;
        int count = 0;
       
       PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());

       for(int hap : happiness){
        pq.offer(hap);
       }
       for(int i=0; i<k; i++){
        int hap = pq.poll();
        result += Math.max(hap-count, 0);
        count++;
       }
       return result;
    }
}

********************************************* Python **********************************

class Solution:
    def maximumHappinessSum(self, happiness: List[int], k: int) -> int:
        happiness.sort(reverse=True)
        count = 0
        result = 0
// for i in range(k):
        while k>0:
            result += max(happiness[count] - count, 0)
            count += 1
            k -= 1

        return result
