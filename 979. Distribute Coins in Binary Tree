class Solution {

    private int moves;

    private int solve(TreeNode root){
        
        if(root == null){
            return 0;
        }

        int l = solve(root.left);
        int r = solve(root.right);

        // The number of extra coins at the current node
        int totalExtraCandid = (l + r + root.val) - 1;

        // Update the moves with the absolute values of l and r
        moves += Math.abs(l) + Math.abs(r);

        return totalExtraCandid;
    }

    public int distributeCoins(TreeNode root) {
        moves = 0;  // Initialize moves to 0

        solve(root);

        return moves;
    }
}

class Solution
{
    public static int distributeCoins(TreeNode root) {
        if (root == null || (root.left == null && root.right == null)) {
            return 0;
        }

        int[] moves = {0};
        solve(root, moves);

        return moves[0];
    }
    private static int solve(TreeNode root, int[] moves) {
        if (root == null) {
            return 0;
        }

        int l = solve(root.left, moves);
        int r = solve(root.right, moves);

        int totalExtraCandies = (l + r + root.val) - 1;

        moves[0] += Math.abs(l) + Math.abs(r);

        return totalExtraCandies;
    }
}
