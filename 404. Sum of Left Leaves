// Better solution

class Solution {

    public int solve(TreeNode current, boolean isLeft){

        if(current == null) return 0;

        if(current.left == null && current.right == null && isLeft == true){

            return current.val;
        }
        return solve(current.left, true) + solve(current.right, false);
    }
    
    public int sumOfLeftLeaves(TreeNode root) {
        
      return  solve(root, false);

    }
}
// using pointer

class Solution {

    public int solve(TreeNode current, TreeNode parent){

        if(current == null) return 0; 

       int left =  solve(current.left, current);
       int right = solve(current.right, current);

        int sum = 0;

        if(current.left == null && current.right == null){
            if(parent != null && parent.left == current){
                
                sum += current.val;
            }
        }
        return left + right + sum;
    }

  
    
    public int sumOfLeftLeaves(TreeNode root) { 

        if(root == null) return 0;

        TreeNode parent = null;

        return  solve(root, parent);

    }
}
